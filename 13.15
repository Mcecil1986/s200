import java.math.BigInteger;

class Rational extends Number implements Comparable<Rational> {
    private BigInteger numerator;
    private BigInteger denominator;

    public Rational(BigInteger numerator, BigInteger denominator) {
        BigInteger gcd = gcd(numerator, denominator);
        this.numerator = numerator.divide(gcd);
        this.denominator = denominator.divide(gcd);
        if (this.denominator.compareTo(BigInteger.ZERO) < 0) {
            this.denominator = this.denominator.negate();
            this.numerator = this.numerator.negate();
        }
    }

    private static BigInteger gcd(BigInteger n, BigInteger d) {
        return n.gcd(d);
    }

    public Rational add(Rational secondRational) {
        BigInteger n = (numerator.multiply(secondRational.denominator)).add(denominator.multiply(secondRational.numerator));
        BigInteger d = denominator.multiply(secondRational.denominator);
        return new Rational(n, d);
    }

  
    public Rational subtract(Rational secondRational) {
        BigInteger n = (numerator.multiply(secondRational.denominator)).subtract(denominator.multiply(secondRational.numerator));
        BigInteger d = denominator.multiply(secondRational.denominator);
        return new Rational(n, d);
    }


    public Rational multiply(Rational secondRational) {
        BigInteger n = numerator.multiply(secondRational.numerator);
        BigInteger d = denominator.multiply(secondRational.denominator);
        return new Rational(n, d);
    }

 
    public Rational divide(Rational secondRational) {
        BigInteger n = numerator.multiply(secondRational.denominator);
        BigInteger d = denominator.multiply(secondRational.numerator);
        return new Rational(n, d);
    }

 
    @Override
    public String toString() {
        if (denominator.equals(BigInteger.ONE))
            return numerator + "";
        else
            return numerator + "/" + denominator;
    }

 
    @Override
    public int intValue() {
        return (int)doubleValue();
    }

    @Override
    public float floatValue() {
        return (float)doubleValue();
    }

 
    @Override
    public double doubleValue() {
        return numerator.doubleValue() / denominator.doubleValue();
    }

    @Override
    public long longValue() {
        return (long)doubleValue();
    }

    @Override
    public int compareTo(Rational o) {
        Rational temp = this.subtract(o);
        if (temp.numerator.compareTo(BigInteger.ZERO) > 0)
            return 1;
        else if (temp.numerator.compareTo(BigInteger.ZERO) < 0)
            return -1;
        else
            return 0;
    }
}
